@model EmployeeListViewModel
@{
    var hasEmployees = Model.Employees.Any();
    var startItem = hasEmployees ? ((Model.CurrentPage - 1) * Model.PageSize) + 1 : 0;
    var endItem = hasEmployees ? startItem + Model.Employees.Count() - 1 : 0;
    var previousPage = Model.CurrentPage > 1 ? Model.CurrentPage - 1 : 1;
    var nextPage = Model.CurrentPage < Model.TotalPages ? Model.CurrentPage + 1 : Model.TotalPages;
}

<div class="d-none" data-current-page="@Model.CurrentPage" data-total-pages="@Model.TotalPages"></div>

@if (!hasEmployees)
{
    <div class="alert alert-info">No employees found matching the current filters.</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="text-muted small">
            Showing @startItem - @endItem of @Model.TotalCount employees
        </div>
    </div>
    <table class="table table-striped table-hover align-middle">
        <thead>
            <tr>
                <th scope="col">Photo</th>
                <th scope="col">Employee No</th>
                <th scope="col">Employee Name</th>
                <th scope="col">Department</th>
                <th scope="col">Occupation</th>
                <th scope="col">Job Title</th>
                <th scope="col">Contact</th>
                <th scope="col" class="text-end">Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var employee in Model.Employees)
        {
            <tr>
                <td>
                    @if (!string.IsNullOrEmpty(employee.PhotoUrl))
                    {
                        <img src="@Url.Content($"~/{employee.PhotoUrl}")"
                             alt="@employee.EmpName"
                             class="rounded-circle"
                             style="object-fit: cover;"
                             width="48"
                             height="48" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle fs-3 text-secondary"></i>
                    }
                </td>
                <td>@employee.EmpNo</td>
                <td>@employee.EmpName</td>
                <td>@(employee.Department?.Name ?? "-")</td>
                <td>@(employee.Occupation?.Title ?? "-")</td>
                <td>@(employee.JobTitle ?? "-")</td>
                <td>
                    @if (!string.IsNullOrEmpty(employee.Phone))
                    {
                        <div>@employee.Phone</div>
                    }
                    @if (!string.IsNullOrEmpty(employee.Email))
                    {
                        <div>@employee.Email</div>
                    }
                </td>
                <td class="text-end">
                    <button type="button"
                            class="btn btn-sm btn-link text-info"
                            data-modal-url="@Url.Action("Details", new { id = employee.Id })"
                            data-modal-target="#modalDetails"
                            aria-label="View employee">
                        <i class="bi bi-eye"></i>
                    </button>
                    <button type="button"
                            class="btn btn-sm btn-link text-primary"
                            data-modal-url="@Url.Action("Edit", new { id = employee.Id })"
                            data-modal-target="#modalForm"
                            aria-label="Edit employee">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    <button type="button"
                            class="btn btn-sm btn-link text-danger"
                            data-modal-url="@Url.Action("Delete", new { id = employee.Id })"
                            data-modal-target="#modalForm"
                            aria-label="Delete employee">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Employees pagination">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : string.Empty)">
                    <a class="page-link"
                       href="@Url.Action("List", new { searchEmpNo = Model.SearchEmpNo, searchEmpName = Model.SearchEmpName, departmentId = Model.SelectedDepartmentId, occupationId = Model.SelectedOccupationId, pageNo = previousPage })"
                       data-page="@previousPage"
                       aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @for (var pageNo = 1; pageNo <= Model.TotalPages; pageNo++)
                {
                    <li class="page-item @(pageNo == Model.CurrentPage ? "active" : string.Empty)">
                        <a class="page-link"
                           href="@Url.Action("List", new { searchEmpNo = Model.SearchEmpNo, searchEmpName = Model.SearchEmpName, departmentId = Model.SelectedDepartmentId, occupationId = Model.SelectedOccupationId, pageNo })"
                           data-page="@pageNo">
                            @pageNo
                        </a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : string.Empty)">
                    <a class="page-link"
                       href="@Url.Action("List", new { searchEmpNo = Model.SearchEmpNo, searchEmpName = Model.SearchEmpName, departmentId = Model.SelectedDepartmentId, occupationId = Model.SelectedOccupationId, pageNo = nextPage })"
                       data-page="@nextPage"
                       aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    }
}
